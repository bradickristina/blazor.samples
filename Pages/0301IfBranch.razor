@page "/0301IfBranch"

<PageTitle>Calculate</PageTitle>
<h1>Calculate</h1>
<p>
You can try to enter integers, real numbers and texts that are not numbers at all.
</p>
<table border="1">
    <tr>
        <td>First argument:</td>
        <td><input style="text-align:right" @bind="x"/></td>
    </tr>
    <tr>
        <td>Second argument:</td>
        <td><input style="text-align:right" @bind="y"/></td>
    </tr>
    <tr>
        <td>Third argument:</td>
        <td><input style="text-align:right" @bind="z"/></td>
    </tr>
    <tr>
        <td>Fourth argument:</td>
        <td><input style="text-align:right" @bind="w"/></td>
    </tr>
      <tr>
        <td>Fifth argument:</td>
        <td><input style="text-align:right" @bind="k"/></td>
    </tr>
    <tr>
        <td style="text-align:center" colspan="2">
            <button @onclick="Minimum">Determine Minimum</button> &nbsp; 
        <button @onclick="Maximum">Determine Maximum</button> &nbsp;
        </td>
    </tr>
     <tr>
        <td style="text-align:center" colspan="2">
            <button @onclick="avarage">Determine Avarage</button> &nbsp; 
        <button @onclick="closest">Determine closest number to avg</button> &nbsp;
        </td>
    </tr>
    <tr>
        <td style="text-align:center" colspan="2">
            <button @onclick="nolower">How many numbers are lower than avarage</button> &nbsp; 
        <button @onclick="nohigher">>How many numbers are higher than avarage</button> &nbsp;
        </td>
    </tr>

    <tr>
    
        <td>Result:</td>
        <td><input style="text-align:right" @bind="result"/></td>
    </tr>
    
</table>
<br/>
@code {

    private double x=0;
    private double y=-1.5;
    private double z = 1.5;
    private double w = 2;
    private double k = 5;

    
    private double result;
   

 private void Minimum()
    {
        
        double min = x;
        if (y < min)
            min = y;
        if (z < min)
            min = z;
        if (w < min)
            min = w;
            if (k < min)
            min = k;
        result = min;
          
    }

    private void Maximum()
    {
        
        double max = x;
        if (y > max)
            max = y;
        if (z > max)
            max = z;
        if (w > max)
        max = w;
        if (k > max)
        max = k;
    result = max;
        
}
public void avarage()
{
    result= ( x + y + z + w + k)/5; 
    
}
 public void closest() {
    double[] arr = {x, y, z, w, k};
    result = DSS.Helpers.NewBaseType.ClosestToAvg(arr);
}
public void nolower() {
    double [] arr = {x, y, z, w, k};
    result = DSS.Helpers.NewBaseType.numLowerThenAverage(arr);

}
public void nohigher() {
    double [] arr = {x, y, z, w, k};
    result = DSS.Helpers.NewBaseType.numHigherThanAvarage(arr);

}

}










 